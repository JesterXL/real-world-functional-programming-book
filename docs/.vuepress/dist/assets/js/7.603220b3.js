(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{207:function(i,v,_){"use strict";_.r(v);var l=_(0),e=Object(l.a)({},(function(){var i=this,v=i.$createElement,_=i._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[_("p",[i._v('Before the "why" of each section, need a quote that states the core idea of the section.\nLike curry for exmample: "All functions take 1, and only 1, parameter" or something like that.')]),i._v(" "),_("ul",[_("li",[_("p",[i._v("intro")]),i._v(" "),_("ul",[_("li",[i._v("why")]),i._v(" "),_("li",[i._v("what we'll cover")]),i._v(" "),_("li",[i._v("what's next?")])])]),i._v(" "),_("li",[_("p",[i._v("regular functions")]),i._v(" "),_("ul",[_("li",[i._v("why")]),i._v(" "),_("li",[i._v("review of functions\n"),_("ul",[_("li",[i._v("function declaration")]),i._v(" "),_("li",[i._v("function expressions")]),i._v(" "),_("li",[i._v("arrow function expressions")]),i._v(" "),_("li",[i._v("calling")]),i._v(" "),_("li",[i._v("arguments\n"),_("ul",[_("li",[i._v("no arguments")]),i._v(" "),_("li",[i._v("named arguments")]),i._v(" "),_("li",[i._v("default arguments")]),i._v(" "),_("li",[i._v("dynamic arguments")])])]),i._v(" "),_("li",[i._v("return values\n"),_("ul",[_("li",[i._v("single value")]),i._v(" "),_("li",[i._v("Object destructuring")]),i._v(" "),_("li",[i._v("Array destructuring")])])]),i._v(" "),_("li",[i._v("closures")]),i._v(" "),_("li",[i._v("variable hoisting")]),i._v(" "),_("li",[i._v("let scope")]),i._v(" "),_("li",[i._v("scope")]),i._v(" "),_("li",[i._v("class methods")]),i._v(" "),_("li",[i._v("bind")]),i._v(" "),_("li",[i._v("dynamically calling")]),i._v(" "),_("li",[i._v("functions as values")]),i._v(" "),_("li",[i._v("higher order functions")]),i._v(" "),_("li",[i._v("functions returning functions")])])])])]),i._v(" "),_("li",[_("p",[i._v("errors")]),i._v(" "),_("ul",[_("li",[i._v("throw")]),i._v(" "),_("li",[i._v("catch")]),i._v(" "),_("li",[i._v("finally")]),i._v(" "),_("li",[i._v("uncaught sync")]),i._v(" "),_("li",[i._v("uncaught async")]),i._v(" "),_("li",[i._v("swallow exceptions")])])]),i._v(" "),_("li",[_("p",[i._v("callbacks")])]),i._v(" "),_("li",[_("p",[i._v("events")])]),i._v(" "),_("li",[_("p",[i._v("Promises")])]),i._v(" "),_("li",[_("p",[i._v("modules")]),i._v(" "),_("ul",[_("li",[i._v("scripts")]),i._v(" "),_("li",[i._v("cli vs running")]),i._v(" "),_("li",[i._v("objects")]),i._v(" "),_("li",[i._v("classes")])])]),i._v(" "),_("li",[_("p",[i._v("pure functions")]),i._v(" "),_("ul",[_("li",[i._v("why")]),i._v(" "),_("li",[i._v("same input, same output, no side effects")]),i._v(" "),_("li",[i._v("same input")]),i._v(" "),_("li",[i._v("same output")]),i._v(" "),_("li",[i._v("outside effects")]),i._v(" "),_("li",[i._v("inside effects")]),i._v(" "),_("li",[i._v("immutability")]),i._v(" "),_("li",[i._v("spot the impurities")]),i._v(" "),_("li",[i._v("the case for var and let")]),i._v(" "),_("li",[i._v("what's not allowed with escape hatches")]),i._v(" "),_("li",[i._v("practice: predicates & unit testing with stubs")])])]),i._v(" "),_("li",[_("p",[i._v("getting and setting data")]),i._v(" "),_("ul",[_("li",[i._v("why")]),i._v(" "),_("li",[i._v("storing data")]),i._v(" "),_("li",[i._v("get")]),i._v(" "),_("li",[i._v("set")]),i._v(" "),_("li",[i._v("lenses")])])]),i._v(" "),_("li",[_("p",[i._v("list comprehensions")]),i._v(" "),_("ul",[_("li",[i._v("why")]),i._v(" "),_("li",[i._v("impure & pure foreach")]),i._v(" "),_("li",[i._v("map")]),i._v(" "),_("li",[i._v("impure & pure filtered array")]),i._v(" "),_("li",[i._v("filter")]),i._v(" "),_("li",[i._v("impure & pure modified type")]),i._v(" "),_("li",[i._v("reduce")]),i._v(" "),_("li",[i._v("impure & pure everybody")]),i._v(" "),_("li",[i._v("each")]),i._v(" "),_("li",[i._v("impure & pure at least one")]),i._v(" "),_("li",[i._v("some")]),i._v(" "),_("li",[i._v("impure & pure merging")])])]),i._v(" "),_("li",[_("p",[i._v("curry and partial application")]),i._v(" "),_("ul",[_("li",[i._v("why")]),i._v(" "),_("li",[i._v("a lot of arguments vs all functions only take 1")]),i._v(" "),_("li",[i._v("create functions from functions")]),i._v(" "),_("li",[i._v("partial application")]),i._v(" "),_("li",[i._v("creating partials")]),i._v(" "),_("li",[i._v("creating curried functions\n"),_("ul",[_("li",[i._v("manually")]),i._v(" "),_("li",[i._v("Lodash")]),i._v(" "),_("li",[i._v("Ramda")]),i._v(" "),_("li",[i._v("Sanctuary")])])]),i._v(" "),_("li",[i._v("tacit programming (point-free style)")])])]),i._v(" "),_("li",[_("p",[i._v("Algebriac Data Types")]),i._v(" "),_("ul",[_("li",[i._v("Maybe")]),i._v(" "),_("li",[i._v("Validator")]),i._v(" "),_("li",[i._v("Result")]),i._v(" "),_("li",[i._v("Custom Union Types")])])]),i._v(" "),_("li",[_("p",[i._v("composing functions")])]),i._v(" "),_("li",[_("p",[i._v("composing programs")]),i._v(" "),_("ul",[_("li",[i._v("pure imperative")]),i._v(" "),_("li",[i._v("pure functional")]),i._v(" "),_("li",[i._v("pure functional async")])])]),i._v(" "),_("li",[_("p",[i._v("debugging")])]),i._v(" "),_("li",[_("p",[i._v("total functions")])])])])}),[],!1,null,null,null);v.default=e.exports}}]);